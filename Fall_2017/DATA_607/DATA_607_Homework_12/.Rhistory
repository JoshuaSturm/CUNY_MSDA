#
# train.spam <- train.spam %>%
#     tm_map(content_transformer(tolower)) %>%
#     tm_map(stripWhitespace) %>%
#     tm_map(removePunctuation) %>%
#     tm_map(removeNumbers) %>%
#     tm_map(removeWords, stopwords("english")) %>%
#     tm_map(stemDocument)
# test.ham <- tm_map(test.ham, PlainTextDocument)
# test.spam <- tm_map(test.spam, PlainTextDocument)
comb <- c(test.ham, test.spam, recursive=T)
comb <- TermDocumentMatrix(comb)
comb <- removeSparseTerms(comb, sparse = 0.95)
tr <- sample(comb)
# tr <- comb[1:4393, ]
# ts <- comb[4394:5857, ]
# test.ham <- TermDocumentMatrix(test.ham)
# test.spam <- TermDocumentMatrix(test.spam)
#
# test.ham <- removeSparseTerms(test.ham, 0.95)
# test.spam <- removeSparseTerms(test.spam, 0.95)
types <- unlist(meta(tr, "type")[,1])
types <- unlist(meta(tr, "type")[,1])
types <- unlist(meta(tr, "type")[,1])
install.packages(c("lubridate", "openssl", "rlang"))
knitr::opts_chunk$set(echo = TRUE, warn = F, message = F)
options(stringsAsFactors = F)
library(tidyverse)
library(stringr)
library(wordcloud2)
library(tm)
library(quanteda)
library(RTextTools)
setwd("~/GitHub/CUNY_MSDA/Fall_2017/DATA_607/DATA_607_Project_4")
# Training Files
ham.one.dir <- list.files("easy_ham/", full.names = T, recursive = F)
spam.one.dir <- list.files("spam/", full.names = T, recursive = F)
# Testing Files
ham.two.dir <- list.files("easy_ham_2/", full.names = T, recursive = F)
spam.two.dir <- list.files("spam_2/", full.names = T, recursive = F)
# Combine testing files
comb <- c(ham.two.dir, spam.two.dir)
head(readLines(ham.one.dir[1]), 10)
tail(readLines(ham.one.dir[1]), 10)
get.msg <- function(path) {
con <- file(path, open="rt")
text <- readLines(con)
msg <- text[seq(which(text == "")[1] + 1, length(text))]
close(con)
return(paste(msg, collapse = "\n"))
}
spam.path <- "spam/"
spam.docs <- dir(spam.path)
spam.docs <- spam.docs[which( !str_detect(spam.docs,"^0000.") & spam.docs != 'cmds' )]
all.spam <- sapply(spam.docs, function(p)get.msg(file.path(spam.path, p, sep = "")))
ham.path <- "easy_ham/"
ham.docs <- dir(ham.path)
ham.docs <- ham.docs[which(ham.docs!="cmds")]
all.ham <- sapply(ham.docs, function(p)get.msg(paste(ham.path,p,sep="")))
spam.2.path <- "spam_2/"
spam.2.docs <- dir(spam.path)
spam.2.docs <- spam.docs[which( !str_detect(spam.docs,"^0000.") & spam.docs != 'cmds' )]
all.spam.2 <- sapply(spam.docs, function(p)get.msg(file.path(spam.path, p, sep = "")))
ham.2.path <- "easy_ham_2/"
ham.2.docs <- dir(ham.path)
ham.2.docs <- ham.docs[which(ham.docs!="cmds")]
all.ham.2 <- sapply(ham.docs, function(p)get.msg(paste(ham.path,p,sep="")))
spam.corpus <- Corpus(VectorSource(all.spam))
meta(spam.corpus, tag = "class") <- "spam"
ham.corpus <- Corpus(VectorSource(all.ham))
meta(ham.corpus, tag = "class") <- "ham"
spam.2.corpus <- Corpus(VectorSource(all.spam.2))
meta(spam.2.corpus, tag = "class") <- "spam"
ham.2.corpus <- Corpus(VectorSource(all.ham.2))
meta(ham.2.corpus, tag = "class") <- "ham"
ham.corpus <- ham.corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, words = stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
tm_map(removeNumbers) %>%
tm_map(stripWhitespace)
spam.corpus <- spam.corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, words = stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
tm_map(removeNumbers) %>%
tm_map(stripWhitespace)
spam.2.corpus <- spam.2.corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, words = stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
tm_map(removeNumbers) %>%
tm_map(stripWhitespace)
ham.2.corpus <- ham.2.corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, words = stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
tm_map(removeNumbers) %>%
tm_map(stripWhitespace)
test.corpus <- Corpus(VectorSource(c(ham.corpus, spam.corpus)))
test.corpus <- sample(test.corpus)
train.corpus <- Corpus(VectorSource(c(ham.2.corpus, spam.2.corpus)))
train.corpus <- sample(train.corpus)
# spam.tdm <- TermDocumentMatrix(spam.corpus)
# spam.dtm <- DocumentTermMatrix(spam.corpus)
# spam.dtm <- removeSparseTerms(spam.dtm, 0.95)
#
# ham.tdm <- TermDocumentMatrix(ham.corpus)
# ham.dtm <- DocumentTermMatrix(ham.corpus)
# ham.dtm <- removeSparseTerms(ham.dtm, 0.95)
#
# spam.2.tdm <- TermDocumentMatrix(spam.2.corpus)
# spam.2.dtm <- DocumentTermMatrix(spam.2.corpus)
# spam.2.dtm <- removeSparseTerms(spam.2.dtm, 0.95)
#
# ham.2.tdm <- TermDocumentMatrix(ham.2.corpus)
# ham.2.dtm <- DocumentTermMatrix(ham.2.corpus)
# ham.2.dtm <- removeSparseTerms(ham.2.dtm, 0.95)
test.dtm <- DocumentTermMatrix(test.corpus)
test.dtm <- removeSparseTerms(test.dtm, 0.90)
train.dtm <- DocumentTermMatrix(train.corpus)
train.dtm <- removeSparseTerms(train.dtm, 0.90)
tot.dtm <- c(test.dtm, train.dtm)
all.labels <- c(rep("spam", length(spam.docs)), rep("ham", length(ham.docs)), rep("spam", length(spam.2.docs)), rep("ham", length(ham.2.docs)))
lb <- length(spam.docs) + length(ham.docs)
container <- create_container(tot.dtm, labels = all.labels, trainSize = 1:lb, testSize = (lb+1):length(all.labels), virgin = F)
install.packages(c("devtools", "openssl", "quanteda", "rlang", "rmarkdown", "tidyselect", "tidyverse"))
load("more/atheism.RData")
us12 <- subset(atheism, nationality == "United States" & year == "2012")
sum(us12$response == "atheist") / nrow(us12)
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
(0.0634 - 0.0364)/2
ca12 <- subset(atheism, nationality == "Canada" & year == "2012")
ca.prop <- sum(ca12$response == "atheist") / nrow(ca12)
ca.moe <- (0.1075 - 0.0721) / 2
nl12 <- us12 <- subset(atheism, nationality == "Netherlands" & year == "2012")
nl.prop <- sum(nl12$response == "atheist") / nrow(nl12)
nl.moe <- (0.1696 - 0.1094) / 2
inference(ca12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(nl12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~ p, ylab = "Margin of Error", xlab = "Population Proportion")
p <- 0.1
n <- 1040
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.1, n = 1040", xlim = c(0, 0.18))
summary(p_hats)
summary(p_hats)
p <- 0.1
n <- 400
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats1[i] <- sum(samp == "atheist")/n
}
p <- 0.1
n <- 400
p_hats1 <- rep(0,5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats1[i] <- sum(samp == "atheist")/n
}
p <- 0.02
n <- 1040
p_hats2 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats2[i] <- sum(samp == "atheist")/n
}
p <- 0.02
n <- 400
p_hats3 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats3[i] <- sum(samp == "atheist")/n
}
par(mfrow = c(2, 2))
hist(p_hats, main = "p = 0.1, n = 1040")
hist(p_hats1, main = "p = 0.1, n = 400")
hist(p_hats2, main = "p = 0.02, n = 1040")
hist(p_hats3, main = "p = 0.02, n = 400")
par(mfrow = c(1, 1))
table((sum(es05$response == "atheist")/nrow(es05))(sum(es12$response == "atheist")/nrow(es12)))
es05 <- subset(atheism, nationality == "Spain" & year == "2005")
es12 <- subset(atheism, nationality == "Spain" & year == "2012")
table((sum(es05$response == "atheist")/nrow(es05))(sum(es12$response == "atheist")/nrow(es12)))
table((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
ftable((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
tabulate((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
as.table((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
as.table((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
is.table((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
table((sum(es05$response == "atheist")/nrow(es05)),(sum(es12$response == "atheist")/nrow(es12)))
es05 <- subset(atheism, nationality == "Spain" & year == "2005")
es12 <- subset(atheism, nationality == "Spain" & year == "2012")
sum(es05$response == "atheist") / nrow(es05)
sum(es12$response == "atheist") / nrow(es12)
es05 <- subset(atheism, nationality == "Spain" & year == "2005")
es12 <- subset(atheism, nationality == "Spain" & year == "2012")
sum(es05$response == "atheist") / nrow(es05)
sum(es12$response == "atheist") / nrow(es12)
inference(es05$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
inference(es12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
length(us05$response)
us05 <- subset(atheism, nationality == "United States" & year == "2005")
length(us05$response)
nrow(us05$response)
nrow(us05)
qnorm(0.95)
1-qnorm(0.95)
pnorm(0.95)
qnorm(0.05)
pnorm(0.05)
qnorm(0.95)
qnorm(0.99)
qnorm(0.97)
qnorm(0.98)
qnorm(0.96)
qnorm(0.95)
qnorm(0.94)
qnorm(0.90)
1-0.5/2
qnorm(0.75)
1-0.05/2
qnorm(0.975)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
z <- qnorm(1-.05/2)
ME <- z*SE
SE <- sqrt((p*(1-p)) / n)
n <- 1259
p <- 0.48
z <- qnorm(1-.05/2)
SE <- sqrt((p*(1-p)) / n)
ME <- z*SE
ci <- 0.95
ci <- 0.95
z <- qnorm(ci/2)
1-.05
z <- qnorm(1-.05/2)
ci.lower <- p - ME
ci.upper <- p + ME
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
n.ca <- 11545
p.ca <- 0.08
n.or <- 4691
p.or <- 0.088
p.diff <- p.ca - p.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
se.or <- (p.or*(1-p.or)) / n.or
SE <- sqrt(se.ca + se.or)
z <- qnorm(1-.05/2)
ME <- z*SE
ci.l <- p - ME
ci.u <- p + ME
n.ca <- 11545
p.ca <- 0.08
n.or <- 4691
p.or <- 0.088
p.diff <- p.ca - p.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
se.or <- (p.or*(1-p.or)) / n.or
SE <- sqrt(se.ca + se.or)
z <- qnorm((1-.05)/2)
ME <- z*SE
ci.l <- p - ME
ci.u <- p + ME
qnorm(1-.05/2)
qnorm(1-.05/2)
SE <- sqrt(se.ca + se.or)
se.or <- (p.or*(1-p.or)) / n.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
n.ca <- 11545
p.ca <- 0.08
n.or <- 4691
p.or <- 0.088
p.diff <- p.ca - p.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
se.or <- (p.or*(1-p.or)) / n.or
SE <- sqrt(se.ca + se.or)
z <- qnorm(1-.05/2)
ME <- z*SE
ci.l <- p - ME
ci.u <- p + ME
n.ca <- 11545
p.ca <- 0.08
n.or <- 4691
p.or <- 0.088
p.diff <- p.ca - p.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
se.or <- (p.or*(1-p.or)) / n.or
SE <- sqrt(se.ca + se.or)
z <- qnorm(1-.05/2)
ME <- z*SE
ci.l <- p - ME
ci.u <- p + ME
n.ca <- 11545
p.ca <- 0.08
n.or <- 4691
p.or <- 0.088
p.diff <- p.ca - p.or
se.ca <- (p.ca*(1-p.ca)) / n.ca
se.or <- (p.or*(1-p.or)) / n.or
SE <- sqrt(se.ca + se.or)
z <- qnorm(1-.05/2)
ME <- z*SE
ci.l <- p.diff - ME
ci.u <- p.diff + ME
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
n <- 426
pct <- c(0.048, 0.147, 0.396, 1-0.048-0.147-0.396)
pct * n
n <- 426
pct <- c(0.048, 0.147, 0.396, 1-0.048-0.147-0.396)
pct * n
n <- 426
pct <- c(0.048, 0.147, 0.396, 1-0.048-0.147-0.396)
expct <- pct * n
n <- 426
pct <- c(0.048, 0.147, 0.396, 1-0.048-0.147-0.396)
expct <- pct * n
expct
observed <- c(4, 16, 61, 345)
chi.sq <- sum(((observed - expct)^2) / expct)
ncol(observed)
NCOL(observed)
nrow(observed)
NROW(observed)
length(observed)
pchisq(chi.sq, df = df, lower.tail = F)
observed <- c(4, 16, 61, 345)
chi.sq <- sum(((observed - expct)^2) / expct)
k <- NROW(observed)
df <- k - 1
pchisq(chi.sq, df = df, lower.tail = F)
observed <- c(4, 16, 61, 345)
chi.sq <- sum(((observed - expct)^2) / expct)
k <- length(observed)
df <- k - 1
pchisq(chi.sq, df = df, lower.tail = F)
2607 / 50739
48132/50739
\frac{(373 - 340)^2}{340}
((373 - 340)^2)/340
((373 - 339.9853958)^2)/339.9853958
2607 * 6617 / 50739
((373 - 339.9854)^2)/(339.9854)
chi.sq <- 20.93
df <- (2 - 1)*(5 - 1)
p <- pchisq(chi.sq, df = df, lower.tail = F)
p
install.packages(c("openssl", "quanteda", "reticulate", "tidyverse"))
setwd("C:/Users/Shua/Dropbox/MSDA/DATA 607/Week 12")
install.packages(c("RMySQL", "RNeo4j"))
setwd("C:/Users/Shua/Dropbox/MSDA/DATA 607/Week 12")
library(tidyverse)
library(RMySQL)
library(RNeo4j)
# Connect to the database
flights.con <- dbConnect(MySQL(),
user = 'test',
password = 'thisisnotsecure',
host = 'localhost',
dbname = 'loadflights')
# Connect to the database
flights.con <- dbConnect(MySQL(),
user = 'test',
password = 'thisisnotsecure',
host = 'localhost',
dbname = 'loadflights')
# Connect to the database
flights.con <- dbConnect(MySQL(),
user = 'test',
password = 'thisisnotsecure',
host = 'localhost',
dbname = 'flights')
View(flights.con)
View(flights.con)
summary(flights.con)
dbGetInfo(flights.con)
dbListTables(flights.con)
dbListFields(flights.con, "airlines")
dbListFields(flights.con, "airlines$carrier")
dbListFields(flights.con, "airlines", "name")
dbListFields(flights.con, "airlines", "weather")
dbReadTable(flights.con, "airlines")
# Connect to the database
flights.con <- dbConnect(MySQL(),
user = 'test',
password = 'thisisnotsecure',
host = 'localhost',
dbname = 'flights')
# Ensure proper connection
dbGetInfo(flights.con)
dbListTables(flights.con)
# Connect to the database
flights.con <- dbConnect(MySQL(),
user = 'test',
password = 'thisisnotsecure',
host = 'localhost',
dbname = 'flights')
# Ensure proper connection
dbGetInfo(flights.con)
dbListTables(flights.con)
#
# Two ways two do this: dbSendQuery() + dbFetch(), or in one step using dbGetQuery()
#
airlines <- dbGetQuery(flights.con,
'SELECT * FROM airlines')
airports <- dbGetQuery(flights.con,
'SELECT * FROM airports')
flights <- dbGetQuery(flights.con,
'SELECT * FROM flights')
planes <- dbGetQuery(flights.con,
'SELECT * FROM planes')
weather <- dbGetQuery(flights.con,
'SELECT * FROM weather')
View(airlines)
View(airports)
#
# Sever database connection
#
dbDisconnect(flights.con)
install.packages("mongolite")
dbUnloadDriver(driver)
dbUnloadDriver(dbDriver("MySQL"))
dbDisconnect(flights.con)
flights.mongo <- mongo(collection = "airlines", db= "flights", url = "mongodb://localhost")
library(mongolite)
flights.mongo <- mongo(collection = "airlines", db= "flights", url = "mongodb://localhost")
View(flights.mongo)
View(flights.mongo)
flights.mongo
mongo.flights <- flights.mongo$insert(flights)
View(mongo.flights)
View(mongo.flights)
mongo.flights$nInserted
mongo.flights$find()
dim(mongo.flights)
nrow(mongo.flights)
nrow(mongo.flights$nInserted)
NROW(mongo.flights$nInserted)
ncol(mongo.flights$nInserted)
NCOL(mongo.flights$nInserted)
mongo.flights$find()
mongo.flights$find(query = '{}', fields = '{}')
head(mongo.flights$export(stdout()))
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "airlines")
View(flights.mongo)
View(flights.mongo)
mongo.flights <- flights.mongo$insert(flights)
mongo.flights$find()
mongo.flights$nInserted$find()
mongo.flights$count()
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "airlines", db = "flights")
mongo.flights <- flights.mongo$insert(flights)
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "airlines", db = "flightsdb")
flights.mongo
flights.mongo$count()
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "airlines", db = "flightsdb")
flights.mongo$insert(flights)
flights.mongo$count()
flights.mongo$find()
head(flights.mongo$find())
flightsdb
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "flights", db = "flightsdb")
#
# Run 'mongod' to start a local mongo server
#
flights.mongo <- mongo(collection = "flights", db = "flightsdb")
flights.mongo$insert(flights)
#
# We can also create individual tables (databases) for airlines, airports, etc...
#
airlines.mongo <- mongo(collection = "flights", db = "airlines")
airlines.mongo$insert(airlines)
airports.mongo <- mongo(collection = "flights", db = "airports")
airports.mongo$insert(airports)
planes.mongo <- mongo(collection = "flights", db = "planes")
planes.mongo$insert(planes)
weather.mongo <- mongo(collection = "flights", db = "weather")
weather.mongo$insert(weather)
#
# Verify migration worked correctly
#
head(flights.mongo$find())
